/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    void dfs(TreeNode* root, int level, vector<pair<long long int,int>>&arr){
        if(!root)return ;
        pair<long long int,int>p={};
        if(arr.size()==level)arr.push_back(p);
        arr[level].first+=root->val;
        arr[level].second++;
        if(root->left)dfs(root->left,level+1,arr);
        if(root->right)dfs(root->right,level+1,arr);

    }
public:
    vector<double> averageOfLevels(TreeNode* root) {
        vector<double>result;
        if(!root) return {};
        vector<pair<long long int,int>>arr;
        dfs(root,0,arr);
        for(auto x:arr){
            double ans=(x.first*1.0)/x.second;
            result.push_back(ans);
        }
        return result;
    }
};
